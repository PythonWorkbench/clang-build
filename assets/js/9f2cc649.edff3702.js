"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9022],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return g}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),s=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(r),g=o,f=d["".concat(u,".").concat(g)]||d[g]||l[g]||i;return r?n.createElement(f,a(a({ref:t},p),{},{components:r})):n.createElement(f,a({ref:t},p))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},135:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],c={},u="Adding projects with custom behaviour",s={unversionedId:"user_guide/scripting",id:"version-0.0.0/user_guide/scripting",title:"Adding projects with custom behaviour",description:'Instead of configuring a project using a "clang-build.toml",',source:"@site/versioned_docs/version-0.0.0/user_guide/scripting.md",sourceDirName:"user_guide",slug:"/user_guide/scripting",permalink:"/clang-build/0.0.0/user_guide/scripting",editUrl:"https://github.com/Trick-17/clang-build/versioned_docs/version-0.0.0/user_guide/scripting.md",tags:[],version:"0.0.0",frontMatter:{}},p=[{value:"Script requirements",id:"script-requirements",children:[],level:2},{value:"Creating a project",id:"creating-a-project",children:[],level:2},{value:"Creating targets",id:"creating-targets",children:[],level:2},{value:"Manipulating sources",id:"manipulating-sources",children:[],level:2}],l={toc:p};function d(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"adding-projects-with-custom-behaviour"},"Adding projects with custom behaviour"),(0,i.kt)("p",null,'Instead of configuring a project using a "clang-build.toml",\nyou can also use a "clang-build.py" script.\nThis allows you, for example, to generate a version-header\nbased on git tags or to (de-)activate features or targets\ndepending on environment variables.'),(0,i.kt)("h2",{id:"script-requirements"},"Script requirements"),(0,i.kt)("p",null,'The "clang-build.py" script, is required to define\nthe following function:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import clang_build\n\ndef get_project(directory, environment, parent=None) -> clang_build.project.Project:\n    project = clang_build.project.Project("projectname", {}, directory, environment, parent=parent)\n    #...\n    return project\n')),(0,i.kt)("h2",{id:"creating-a-project"},"Creating a project"),(0,i.kt)("p",null,"You can default-initialize a project without targets\nor let clang-build create the project for you, from a\nfolder or from a configuration ",(0,i.kt)("inlineCode",{parentName:"p"},"dict"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from clang_build.project import Project\n\ndef get_project(directory, environment, parent=None) -> Project:\n    # Empty project:\n    project = Project("projectname", {}, directory, environment, parent=parent)\n    # Use defaults to initialize from a folder:\n    project = Project.from_directory(directory, environment, parent=parent)\n    # Use a dictionary:\n    project = Project.from_config({}, directory, environment, parent=parent)\n')),(0,i.kt)("h2",{id:"creating-targets"},"Creating targets"),(0,i.kt)("p",null,"A target always belongs to a project, meaning you\nneed to create a project first. Then,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def get_project(directory, environment, parent=None) -> clang_build.project.Project:\n    project = #...\n    target = clang_build.target.TargetDescription("targetname", {}, project)\n    project.add_targets([target])\n    return project\n')),(0,i.kt)("h2",{id:"manipulating-sources"},"Manipulating sources"),(0,i.kt)("p",null,"Both projects and targets may fetch external sources,\nif a ",(0,i.kt)("inlineCode",{parentName:"p"},"url")," is provided. The source fetching process can\nbe customised by overriding their ",(0,i.kt)("inlineCode",{parentName:"p"},"get_sources")," functions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class CustomSources(clang_build.target.TargetDescription):\n    def get_sources(self):\n        # The base class `get_sources` checks if a `url` was specified in\n        # the config, in which case it will download the sources\n        super().get_sources()\n        # Write some sources\n        # ...\n")),(0,i.kt)("p",null,"Note, when generating sources you should use the properties\nof ",(0,i.kt)("inlineCode",{parentName:"p"},"TargetDescription")," to place them in the right folder."))}d.isMDXComponent=!0}}]);