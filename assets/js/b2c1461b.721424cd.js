"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2959],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),o=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=o(e.components);return i.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),u=o(t),f=r,h=u["".concat(c,".").concat(f)]||u[f]||p[f]||a;return t?i.createElement(h,l(l({ref:n},s),{},{components:t})):i.createElement(h,l({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=u;var d={};for(var c in n)hasOwnProperty.call(n,c)&&(d[c]=n[c]);d.originalType=e,d.mdxType="string"==typeof e?e:r,l[1]=d;for(var o=2;o<a;o++)l[o]=t[o];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1487:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return d},contentTitle:function(){return c},metadata:function(){return o},toc:function(){return s},default:function(){return u}});var i=t(7462),r=t(3366),a=(t(7294),t(3905)),l=["components"],d={},c="Inheritance",o={unversionedId:"user_guide/inheritance",id:"user_guide/inheritance",title:"Inheritance",description:"General",source:"@site/docs/user_guide/inheritance.md",sourceDirName:"user_guide",slug:"/user_guide/inheritance",permalink:"/clang-build/user_guide/inheritance",editUrl:"https://github.com/Trick-17/clang-build/docs/user_guide/inheritance.md",tags:[],version:"current",frontMatter:{},sidebar:"guideSidebar",previous:{title:"Multiple projects",permalink:"/clang-build/user_guide/multiple_projects"},next:{title:"Platform dependence",permalink:"/clang-build/user_guide/platform_dependence"}},s=[{value:"General",id:"general",children:[],level:2},{value:"Include directories",id:"include-directories",children:[{value:"<code>include_directories</code>",id:"include_directories",children:[],level:3},{value:"<code>public_include_directories</code>",id:"public_include_directories",children:[],level:3},{value:"Example",id:"example",children:[],level:3}],level:2},{value:"Flags",id:"flags",children:[{value:"<code>flags</code>",id:"flags-1",children:[],level:3},{value:"<code>public_flags</code>",id:"public_flags",children:[],level:3},{value:"<code>interface_flags</code>",id:"interface_flags",children:[],level:3},{value:"Example",id:"example-1",children:[],level:3}],level:2},{value:"Dependencies",id:"dependencies",children:[{value:"Example",id:"example-2",children:[],level:3}],level:2}],p={toc:s};function u(e){var n=e.components,t=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"inheritance"},"Inheritance"),(0,a.kt)("h2",{id:"general"},"General"),(0,a.kt)("p",null,'Targets can inherit include directories and flags from their direct, as well as\ntransitive, dependencies.\nThe classification of dependencies as "private" or "public" determines their\nvisibility to transitively dependent targets. Private dependencies are intended as\ninternal to a target and public dependencies are part of a targets interface.'),(0,a.kt)("p",null,'Which include directories and flags are visible to dependent targets is in turn\ndetermined by an additional classification into "private"/"public" and "private"/\n"public"/"interface", respectively.'),(0,a.kt)("p",null,'As one should carefully choose, which of these to expose to ones users, "private"\nis the default and "public" and "interface" are made explicit in the corresponding\nkeywords.\nNote, the distinction between "interface" and "public" becomes important when your\ndependency-graph grows to more than two layers, as you want to be able to tell what\nyour top-level targets can include and what gets linked.\nAdditionally, if everything was public, no two targets in the entire dependency-\ngraph would be allowed to depend on different versions of the same library.'),(0,a.kt)("p",null,"The specific inheritance rules are determined by the combination of the\nclassification of dependenies and the classification of include directories and\nflags. They are described in detail below."),(0,a.kt)("h2",{id:"include-directories"},"Include directories"),(0,a.kt)("h3",{id:"include_directories"},(0,a.kt)("inlineCode",{parentName:"h3"},"include_directories")),(0,a.kt)("p",null,"A list of private include directories, i.e. accessible only to the target itself."),(0,a.kt)("p",null,"Exceptions: for header-only libraries, they are treated as public."),(0,a.kt)("p",null,'Default, if none are specified: the target directory and "include", if they exist.'),(0,a.kt)("h3",{id:"public_include_directories"},(0,a.kt)("inlineCode",{parentName:"h3"},"public_include_directories")),(0,a.kt)("p",null,"A list of public include directories, which are accessible to the target itself and\nany dependent target."),(0,a.kt)("p",null,"A target forwards its public dependencies' public include directories, i.e. it adds\nthem to its own ",(0,a.kt)("inlineCode",{parentName:"p"},"public_include_directories"),". The public include directories of a\ntargets private dependencies are added to its (private) ",(0,a.kt)("inlineCode",{parentName:"p"},"include_directories"),"."),(0,a.kt)("p",null,'Default, if none are specified: "include", if it exists.'),(0,a.kt)("p",null,"Note that this mechanism allows ",(0,a.kt)("inlineCode",{parentName:"p"},"public_include_directories")," to be forwarded far up the\ndependency graph. You may want to keep them minimal and follow best practices for your\nfolder structure, in order to avoid confusion in larger projects."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[mylib]\n  include_directories        = ["src/mylib/include", "src/mylib/detail/include"]\n  public_include_directories = ["src/mylib/include"]\n')),(0,a.kt)("h2",{id:"flags"},"Flags"),(0,a.kt)("p",null,"The following sections of a target configuration can each contain ",(0,a.kt)("inlineCode",{parentName:"p"},"compile")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"link")," lists of flags."),(0,a.kt)("h3",{id:"flags-1"},(0,a.kt)("inlineCode",{parentName:"h3"},"flags")),(0,a.kt)("p",null,"Private flags which are only applied to the target itself."),(0,a.kt)("p",null,"Exceptions: for header-only libraries, they are treated as public."),(0,a.kt)("h3",{id:"public_flags"},(0,a.kt)("inlineCode",{parentName:"h3"},"public_flags")),(0,a.kt)("p",null,"Public flags are applied to the target itself, as well as any dependent targets."),(0,a.kt)("p",null,"A target forwards its public dependencies' public flags, i.e. it adds them to its own\n",(0,a.kt)("inlineCode",{parentName:"p"},"public_flags"),". The public flags of a targets private dependencies are added to its\n(private) ",(0,a.kt)("inlineCode",{parentName:"p"},"flags"),"."),(0,a.kt)("p",null,"Note that this mechanism allows ",(0,a.kt)("inlineCode",{parentName:"p"},"public_flags")," to be forwarded far up the dependency graph,\nso it is recommended to be mindful of the flags added here. For example, don't put force\nyour users to adopt your warning settings by putting flags like ",(0,a.kt)("inlineCode",{parentName:"p"},"-Werror")," here."),(0,a.kt)("h3",{id:"interface_flags"},(0,a.kt)("inlineCode",{parentName:"h3"},"interface_flags")),(0,a.kt)("p",null,"Interface flags are not applied to the target itself, but instead to the next\ntransitively dependent shared library or executable."),(0,a.kt)("p",null,"Executables and shared libraries will apply the interface flags of their private and\npublic dependencies to themselves (i.e. add them to their own private ",(0,a.kt)("inlineCode",{parentName:"p"},"flags"),").\nThey will not be forwared (added to their own ",(0,a.kt)("inlineCode",{parentName:"p"},"interface_flags")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"public_flags"),")."),(0,a.kt)("p",null,"Header-only and static libraries will not apply their private or public dependencies'\ninterface flags to themselves, but will forward them (i.e. they will add them to their\nown ",(0,a.kt)("inlineCode",{parentName:"p"},"interface_flags"),")."),(0,a.kt)("p",null,"An example use-case is a static library ",(0,a.kt)("inlineCode",{parentName:"p"},"A"),", which depends on a dynamic library ",(0,a.kt)("inlineCode",{parentName:"p"},"B"),". As ",(0,a.kt)("inlineCode",{parentName:"p"},"B"),"\ncannot be linked into ",(0,a.kt)("inlineCode",{parentName:"p"},"A"),", it needs to be linked to the next shared library or executable\nwhich depends directly or transitively on ",(0,a.kt)("inlineCode",{parentName:"p"},"A"),"."),(0,a.kt)("h3",{id:"example-1"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[mylib]\n  target_type = "static library"\n  [mylib.flags]\n    compile = ["-Wno-unused-parameter"]\n  [mylib.public_flags]\n    compile = ["-DMYLIB_NO_EXCEPTIONS"]\n  [mylib.interface_flags]\n    link = ["-lpthread"]\n')),(0,a.kt)("h2",{id:"dependencies"},"Dependencies"),(0,a.kt)("h3",{id:"example-2"},"Example"),(0,a.kt)("p",null,'In the following example, "src/C/include" will be available to ',(0,a.kt)("inlineCode",{parentName:"p"},"app")," as it is\nforwarded by ",(0,a.kt)("inlineCode",{parentName:"p"},"A"),', while "src/B/include" will not be available because ',(0,a.kt)("inlineCode",{parentName:"p"},"B")," is a\nprivate dependency of ",(0,a.kt)("inlineCode",{parentName:"p"},"A"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[app]\n  dependencies = ["A"]\n\n[A]\n  target_type         = "static library"\n  dependencies        = ["B"]\n  public_dependencies = ["C"]\n\n[B]\n  target_type                = "shared library"\n  public_include_directories = ["src/B/include"]\n\n[C]\n  target_type                = "shared library"\n  public_include_directories = ["src/C/include"]\n')))}u.isMDXComponent=!0}}]);