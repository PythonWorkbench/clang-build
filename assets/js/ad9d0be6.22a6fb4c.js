"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8251],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,f=d["".concat(u,".").concat(m)]||d[m]||s[m]||i;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2815:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],l={},u="First steps",p={unversionedId:"user_guide/first_steps",id:"user_guide/first_steps",title:"First steps",description:"Let's start with a very simple project. You only have one source file in your project",source:"@site/docs/user_guide/first_steps.md",sourceDirName:"user_guide",slug:"/user_guide/first_steps",permalink:"/clang-build/user_guide/first_steps",editUrl:"https://github.com/Trick-17/clang-build/docs/user_guide/first_steps.md",tags:[],version:"current",frontMatter:{},sidebar:"guideSidebar",next:{title:"Customisations",permalink:"/clang-build/user_guide/customizations"}},c=[{value:"The minimum working example",id:"the-minimum-working-example",children:[],level:2},{value:"Switching between debug and release",id:"switching-between-debug-and-release",children:[],level:2}],s={toc:c};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"first-steps"},"First steps"),(0,i.kt)("p",null,"Let's start with a very simple project. You only have one source file in your project\nfolder and you want to compile it into an executable."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://thumbs.gfycat.com/BewitchedAshamedDeermouse-size_restricted.gif"},(0,i.kt)("img",{parentName:"a",src:"https://thumbs.gfycat.com/BewitchedAshamedDeermouse-size_restricted.gif",alt:"Demonstration"}))),(0,i.kt)("h2",{id:"the-minimum-working-example"},"The minimum working example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"my_project\n\u2514\u2500\u2500 my_app.cpp\n")),(0,i.kt)("p",null,"All you have to do, to compile this app is go into your project folder and call"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"clang-build\n")),(0,i.kt)("p",null,"Your project quickly grows and you decide to put all your headers into an ",(0,i.kt)("inlineCode",{parentName:"p"},"include")," folder\nand all your source files into a ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," folder."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"my_project\n\u251c\u2500\u2500 include\n|   \u251c\u2500\u2500 cool_features.hpp\n|   \u2514\u2500\u2500 math_lib.hpp\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 cool_features.cpp\n    \u2514\u2500\u2500 my_app.cpp\n")),(0,i.kt)("p",null,"To compile your project, you just go into your project folder and call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"clang-build\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"include")," folder will automatically be added as an include folder to clang. So all files\nin the ",(0,i.kt)("inlineCode",{parentName:"p"},"include")," folder or subfolders of the ",(0,i.kt)("inlineCode",{parentName:"p"},"include")," folder can be included in the source files\nin the ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," folder as you would normally do:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},'// my_app.cpp\n#include "math_lib.hpp"\n// ...\n')),(0,i.kt)("p",null,"At the same time, all source files in the ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," folder and subfolders of the ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," folder are\nautomatically detected, compiled and linked into one executable."),(0,i.kt)("h2",{id:"switching-between-debug-and-release"},"Switching between debug and release"),(0,i.kt)("p",null,"By default clang-build compiles in ",(0,i.kt)("inlineCode",{parentName:"p"},"Release")," mode meaning optimizations are turned on. If you want\nto debug an application, you need to pass extra flags to the compiler. clang-build does this automatically\nif you pass it the debug flag:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"clang-build --build-type debug\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"clang-build -b debug\n")))}d.isMDXComponent=!0}}]);