"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8421],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,u=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=s(n),m=l,g=p["".concat(u,".").concat(m)]||p[m]||c[m]||i;return n?a.createElement(g,r(r({ref:t},d),{},{components:n})):a.createElement(g,r({ref:t},d))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=p;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6527:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return d},default:function(){return p}});var a=n(7462),l=n(3366),i=(n(7294),n(3905)),r=["components"],o={slug:"/"},u="Clang-build",s={unversionedId:"README",id:"README",title:"Clang-build",description:"PyPI version",source:"@site/docs/README.md",sourceDirName:".",slug:"/",permalink:"/clang-build/",editUrl:"https://github.com/Trick-17/clang-build/docs/README.md",tags:[],version:"current",frontMatter:{slug:"/"}},d=[{value:"Usage",id:"usage",children:[],level:2},{value:"Real-World Examples",id:"real-world-examples",children:[],level:2},{value:"General Ideas",id:"general-ideas",children:[{value:"What should be trivial",id:"what-should-be-trivial",children:[],level:3},{value:"What should be easy",id:"what-should-be-easy",children:[],level:3},{value:"What should be possible",id:"what-should-be-possible",children:[],level:3}],level:2},{value:"Project File By Example",id:"project-file-by-example",children:[{value:"A single target",id:"a-single-target",children:[],level:3},{value:"Two targets with linking",id:"two-targets-with-linking",children:[],level:3},{value:"Adding external dependencies",id:"adding-external-dependencies",children:[],level:3}],level:2}],c={toc:d};function p(e){var t=e.components,n=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"clang-build"},"Clang-build"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://badge.fury.io/py/clang-build"},(0,i.kt)("img",{parentName:"a",src:"https://badge.fury.io/py/clang-build.svg",alt:"PyPI version"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Trick-17/clang-build/actions/workflows/ci.yml"},(0,i.kt)("img",{parentName:"a",src:"https://github.com/Trick-17/clang-build/actions/workflows/ci.yml/badge.svg",alt:"CI"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://www.codacy.com/gh/Trick-17/clang-build/dashboard?utm_source=github.com&utm_medium=referral&utm_content=Trick-17/clang-build&utm_campaign=Badge_Grade"},(0,i.kt)("img",{parentName:"a",src:"https://app.codacy.com/project/badge/Grade/d93344c7088f4c709e2d640f603a1099",alt:"Codacy Badge"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://codecov.io/gh/Trick-17/clang-build"},(0,i.kt)("img",{parentName:"a",src:"https://codecov.io/gh/Trick-17/clang-build/branch/master/graph/badge.svg",alt:"Coverage"}))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://thumbs.gfycat.com/BewitchedAshamedDeermouse-size_restricted.gif"},(0,i.kt)("img",{parentName:"a",src:"https://thumbs.gfycat.com/BewitchedAshamedDeermouse-size_restricted.gif",alt:"Demonstration"}))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Motivation:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Building as much as possible from source eases dependency management and\nensures stability and reproducibility"),(0,i.kt)("li",{parentName:"ul"},"Meta build systems are inherently the wrong way to go, either the build\nsystem or the compiler should be platform-agnostic (ideally both)."),(0,i.kt)("li",{parentName:"ul"},"Trying to cover all use-cases is the wrong way to go - there is no need to\nlet people do it the wrong way"),(0,i.kt)("li",{parentName:"ul"},"CMake is cumbersome, unnecessarily generic and verbose and people should not\nneed a programming/scripting language whose only purpose is to build C++"),(0,i.kt)("li",{parentName:"ul"},"With Clang, finally a properly cross-platform compiler exists")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Goals:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"One compiler (Clang), one build system (written in Python)"),(0,i.kt)("li",{parentName:"ul"},"Automatic integration with language servers (compile_commands.json)"),(0,i.kt)("li",{parentName:"ul"},"Simple projects should be simple to build"),(0,i.kt)("li",{parentName:"ul"},"Build process for reasonable project structures should still be easy"),(0,i.kt)("li",{parentName:"ul"},"Adding third-party dependencies should be manageable")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"What it's not designed to do:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Build anything aside from C language dialects"),(0,i.kt)("li",{parentName:"ul"},"Be able to adapt to any project structure in the world - certain standards are encouraged"),(0,i.kt)("li",{parentName:"ul"},"Work smoothly with or locate pre-built libraries and libraries installed by system package managers")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Related resources:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=7THzO-D0ta4"},'CppCon 2017: Isabella Muerte "There Will Be Build Systems: I Configure Your Milkshake"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://medium.com/@corentin.jabot/accio-dependency-manager-b1846e1caf76"},"https://medium.com/@corentin.jabot/accio-dependency-manager-b1846e1caf76"))),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"In order to run ",(0,i.kt)("inlineCode",{parentName:"p"},"clang-build"),", you only need Clang and Python3.\nInstall via ",(0,i.kt)("inlineCode",{parentName:"p"},"pip install clang-build")," (add the ",(0,i.kt)("inlineCode",{parentName:"p"},"--user")," flag if you don't have admin rights)."),(0,i.kt)("p",null,"Running ",(0,i.kt)("inlineCode",{parentName:"p"},"clang-build")," will try to build the current directory.\nThe command-line options include"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-d path/to/dir")," to build a different directory"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-p")," to show a progress bar"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-V")," to print some additional info"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--debug")," to print the called clang commands")),(0,i.kt)("p",null,"The given directory will be searched for a ",(0,i.kt)("inlineCode",{parentName:"p"},"clang-build.toml")," file, which you can use to configure\nyour build targets, if necessary. However, if you only want to build an executable, you will\nlikely not even need a build file."),(0,i.kt)("p",null,"clang-build tries to use sane defaults, designed to make most projects very easy to configure\nand even complex projects far easier than with common build or meta-build systems."),(0,i.kt)("h2",{id:"real-world-examples"},"Real-World Examples"),(0,i.kt)("p",null,"Examples of real-world used and tested projects, which can be easily be integrated\ninto your project using ",(0,i.kt)("inlineCode",{parentName:"p"},"clang-build"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Trick-17/clang-build/tree/master/test/boost-filesystem"},"test/boost-filesystem"))),(0,i.kt)("h2",{id:"general-ideas"},"General Ideas"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Note: not all of these are implemented, yet.")),(0,i.kt)("h3",{id:"what-should-be-trivial"},"What should be trivial"),(0,i.kt)("p",null,"This would be things that require only the invocation of ",(0,i.kt)("inlineCode",{parentName:"p"},"clang-build"),"\nand no build file."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"build any hello world program or other MWE, given a reasonable folder\nstructure (i.e anything with a main and without non-std dependencies)"),(0,i.kt)("li",{parentName:"ul"},"include anything that can be found by sane default search"),(0,i.kt)("li",{parentName:"ul"},"using command line arguments:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"specify root/source and build directories"),(0,i.kt)("li",{parentName:"ul"},"set build type (last used should be cached/remembered)"),(0,i.kt)("li",{parentName:"ul"},"set verbosity")))),(0,i.kt)("p",null,"Sane defaults and default behaviour:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"platform-independence"),(0,i.kt)("li",{parentName:"ul"},'build into a "build/" directory, not into toplevel'),(0,i.kt)("li",{parentName:"ul"},'for multiple targets build each into its own "build/targetname"'),(0,i.kt)("li",{parentName:"ul"},'default search paths for different platforms, including also e.g.\n"./include", "./lib", "./build/lib", "/usr/local/...", ...')),(0,i.kt)("h3",{id:"what-should-be-easy"},"What should be easy"),(0,i.kt)("p",null,"This would be things that only require a minimal TOML project file"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"add dependency / external project from source folder or remote (e.g.\ngithub)"),(0,i.kt)("li",{parentName:"ul"},"header-only should be trivial"),(0,i.kt)("li",{parentName:"ul"},"for a library with a good folder structure, it should be easy to\nwrite a build config"),(0,i.kt)("li",{parentName:"ul"},"create a library from one subfolder, an executable from another and\nlink them"),(0,i.kt)("li",{parentName:"ul"},"setting target-specific (note: defaults should be sane!)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"source file extensions"),(0,i.kt)("li",{parentName:"ul"},"source directories"),(0,i.kt)("li",{parentName:"ul"},"compile and link flags"),(0,i.kt)("li",{parentName:"ul"},"optional version"),(0,i.kt)("li",{parentName:"ul"},"dependencies (which may include non-targets, e.g. configuration\nsteps)"),(0,i.kt)("li",{parentName:"ul"},"properties (required c++ version, definitions/",(0,i.kt)("inlineCode",{parentName:"li"},"#define"),"s, ...)"))),(0,i.kt)("li",{parentName:"ul"},'access to flag "lists" such as flags for',(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"coverage"),(0,i.kt)("li",{parentName:"ul"},"cuda"),(0,i.kt)("li",{parentName:"ul"},"openmp"))),(0,i.kt)("li",{parentName:"ul"},'set target-specific flags, include folders, etc. which should not be\npropagated to dependency parents as "private"')),(0,i.kt)("h3",{id:"what-should-be-possible"},"What should be possible"),(0,i.kt)("p",null,"Steps that would involve more effort from the user, including possibly\nsome python code"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a Target configuration step before building (e.g. for more involved\nversion numbering)"),(0,i.kt)("li",{parentName:"ul"},"through the configuration step, inclusion of e.g. CMake-project\nshould be possible"),(0,i.kt)("li",{parentName:"ul"},"packaging: any target may be packaged, meaning it's dependencies are\nhandled and if built, binaries may be bundled"),(0,i.kt)("li",{parentName:"ul"},"external package dependencies"),(0,i.kt)("li",{parentName:"ul"},"binaries on a server"),(0,i.kt)("li",{parentName:"ul"},"source on a server (fallback from binaries)"),(0,i.kt)("li",{parentName:"ul"},"binaries on disk, try to determine version from path and file names"),(0,i.kt)("li",{parentName:"ul"},"source on disk, try to determine version from path and file names")),(0,i.kt)("h2",{id:"project-file-by-example"},"Project File By Example"),(0,i.kt)("h3",{id:"a-single-target"},"A single target"),(0,i.kt)("p",null,"Note:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"by default, the ",(0,i.kt)("inlineCode",{parentName:"li"},"root")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"<targetname>"),' folders, as well as "include" and "src" subdirectories\nwill be searched for ".hpp", ".hxx", ".h" and ".cpp", ".cxx" and ".c" files'),(0,i.kt)("li",{parentName:"ul"},"a target without ",(0,i.kt)("inlineCode",{parentName:"li"},"target_type"),", but with source files will be an executable"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"output_name")," should not contain pre- or suffixes such as lib, .exe, .so, as they are added automatically"),(0,i.kt)("li",{parentName:"ul"},"if we don't care about the output name, in this case we could skip the project file entirely")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'# Top-level brackets indicate a target\n[hello]\n  output_name = "runHello"\n')),(0,i.kt)("h3",{id:"two-targets-with-linking"},"Two targets with linking"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'# Build a library\n[mylib]\n  target_type = "shared library"\n\n# Build an executable and link the library\n[myexe]\n  output_name = "runExe"\n  target_type = "executable"\n  dependencies = ["mylib"]\n  [myexe.flags]\n    link = ["-DMYEXE_SOME_DEFINE"]\n')),(0,i.kt)("h3",{id:"adding-external-dependencies"},"Adding external dependencies"),(0,i.kt)("p",null,"Note:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'external targets will be copied/downloaded into "build/targetname/external_sources"'),(0,i.kt)("li",{parentName:"ul"},"you can specify a subdirectory, if the thirdparty code has an unusual structure"),(0,i.kt)("li",{parentName:"ul"},"further granularity is given by ",(0,i.kt)("inlineCode",{parentName:"li"},"include_directories")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"sources")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sources"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"headers_exclude")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"sources_exclude")," expect a list of globbing patterns or files (not folders!)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[mylib]\n  url = "https://github.com/trick-17/mylib"\n  version = 1.1                           # Will try to `git checkout 1.1`\n  directory = "sources"                   # Will point to "build/mylib/external_sources/sources"\n  include_directories = ["mylib/include"] # Will point to "build/mylib/external_sources/sources/mylib/include"\n  sources = ["mylib/src/*"]               # Will list everything inside "build/mylib/external_sources/sources/mylib/src"\n  # Maybe we need to deactivate annoying warnings coming from the library\n  [mylib.flags]\n    compile = ["-Wno-deprecated-declarations", "-Wno-self-assign"]\n\n# Build an executable and link the library\n[myexe]\n  dependencies = ["mylib"]\n')))}p.isMDXComponent=!0}}]);