"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9018],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var l=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,l,i=function(e,t){if(null==e)return{};var n,l,i={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=l.createContext({}),s=function(e){var t=l.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return l.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},p=l.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=s(n),h=i,f=p["".concat(c,".").concat(h)]||p[h]||d[h]||r;return n?l.createElement(f,a(a({ref:t},u),{},{components:n})):l.createElement(f,a({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=p;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var s=2;s<r;s++)a[s]=n[s];return l.createElement.apply(null,a)}return l.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2396:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var l=n(7462),i=n(3366),r=(n(7294),n(3905)),a=["components"],o={},c=void 0,s={unversionedId:"module_reference/toolchain",id:"module_reference/toolchain",title:"toolchain",description:"Module containing tool chaines used for compiling and linking.",source:"@site/docs/module_reference/toolchain.md",sourceDirName:"module_reference",slug:"/module_reference/toolchain",permalink:"/clang-build/module_reference/toolchain",editUrl:"https://github.com/Trick-17/clang-build/docs/module_reference/toolchain.md",tags:[],version:"current",frontMatter:{},sidebar:"moduleSidebar",previous:{title:"test",permalink:"/clang-build/module_reference/test"}},u=[{value:"Toolchain Objects",id:"toolchain-objects",children:[{value:"generate_dependency_file",id:"generate_dependency_file",children:[],level:4}],level:2},{value:"Parameters",id:"parameters",children:[],level:2},{value:"Returns",id:"returns",children:[{value:"compile",id:"compile",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-1",children:[],level:2},{value:"Returns",id:"returns-1",children:[{value:"link",id:"link",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-2",children:[],level:2},{value:"Returns",id:"returns-2",children:[{value:"archive",id:"archive",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-3",children:[],level:2},{value:"Returns",id:"returns-3",children:[],level:2},{value:"LLVM Objects",id:"llvm-objects",children:[],level:2},{value:"Attributes",id:"attributes",children:[{value:"__init__",id:"__init__",children:[],level:4}],level:2},{value:"Raises",id:"raises",children:[{value:"dialect_exists",id:"dialect_exists",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-4",children:[],level:2},{value:"Returns",id:"returns-4",children:[{value:"generate_dependency_file",id:"generate_dependency_file-1",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-5",children:[],level:2},{value:"Returns",id:"returns-5",children:[{value:"compile",id:"compile-1",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-6",children:[],level:2},{value:"Returns",id:"returns-6",children:[],level:2}],d={toc:u};function p(e){var t=e.components,n=(0,i.Z)(e,a);return(0,r.kt)("wrapper",(0,l.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("a",{id:"clang_build.toolchain"}),(0,r.kt)("h1",{id:"clang_buildtoolchain"},"clang","_","build.toolchain"),(0,r.kt)("p",null,"Module containing tool chaines used for compiling and linking."),(0,r.kt)("a",{id:"clang_build.toolchain.Toolchain"}),(0,r.kt)("h2",{id:"toolchain-objects"},"Toolchain Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Toolchain()\n")),(0,r.kt)("a",{id:"clang_build.toolchain.Toolchain.generate_dependency_file"}),(0,r.kt)("h4",{id:"generate_dependency_file"},"generate","_","dependency","_","file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef generate_dependency_file(source_file, dependency_file, flags, include_directories, is_c_target)\n")),(0,r.kt)("p",null,"Generate a dependency file for a given source file."),(0,r.kt)("p",null,"If the dependency file is placed into a non-existing folder, this\nfolder is generated before compilation."),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,"source_file : pathlib.Path\nThe source file to compile"),(0,r.kt)("p",null,"dependency_file : pathlib.Path\nThe dependency file to generate"),(0,r.kt)("p",null,"flags : list of str\nList of flags to pass to the compiler"),(0,r.kt)("h2",{id:"returns"},"Returns"),(0,r.kt)("p",null,"bool\nTrue if the dependency file generation was successful, else False\nstr\nOutput of the compiler"),(0,r.kt)("a",{id:"clang_build.toolchain.Toolchain.compile"}),(0,r.kt)("h4",{id:"compile"},"compile"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef compile(source_file, object_file, include_directories, flags, is_c_target)\n")),(0,r.kt)("p",null,"Compile a given source file into an object file."),(0,r.kt)("p",null,"If the object file is placed into a non-existing folder, this\nfolder is generated before compilation."),(0,r.kt)("h2",{id:"parameters-1"},"Parameters"),(0,r.kt)("p",null,"source_file : pathlib.Path\nThe source file to compile"),(0,r.kt)("p",null,"object_file : pathlib.Path\nThe object file to generate during compilation"),(0,r.kt)("p",null,"flags : list of str\nList of flags to pass to the compiler"),(0,r.kt)("h2",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,"bool\nTrue if the compilation was successful, else False\nstr\nOutput of the compiler"),(0,r.kt)("a",{id:"clang_build.toolchain.Toolchain.link"}),(0,r.kt)("h4",{id:"link"},"link"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef link(object_files, output_file, flags, library_directories, libraries, is_library, is_c_target)\n")),(0,r.kt)("p",null,"Link into the given output_file."),(0,r.kt)("p",null,"The command should contain all object files, library search paths\nand libraries against which to link. If the output_file is placed\nin a non-existing folder, the folder and all required parents\nare generated."),(0,r.kt)("h2",{id:"parameters-2"},"Parameters"),(0,r.kt)("p",null,"object_files : list of pathlib.Path\nObject files to link\noutput_file : pathlib.Path\nThe output file to generate\nflags : list of str\nFlags to pass to the linker\nlibrary_directories : list of pathlib.Path\nDirectories to search for libraries during linking\nlibraries : list of pathlib.Path\nLibraries to link to\nis_library : bool\nIf true, create a shared library. Else, create an executable."),(0,r.kt)("h2",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,"bool\nTrue if linking was successful, False otherwise\nstr\nThe output of the linker"),(0,r.kt)("a",{id:"clang_build.toolchain.Toolchain.archive"}),(0,r.kt)("h4",{id:"archive"},"archive"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef archive(object_files, output_file, flags)\n")),(0,r.kt)("p",null,"Archive object files into a static library."),(0,r.kt)("h2",{id:"parameters-3"},"Parameters"),(0,r.kt)("p",null,"object_files : list of pathlib.Path\nObject files to put in a static library\noutput_file : pathlib.Path\nThe static library to create\nflags : list of str\nFlags to pass to the archiver"),(0,r.kt)("h2",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,"bool\nTrue if archiving was successful, False otherwise\nstr\nThe output of the archiver"),(0,r.kt)("a",{id:"clang_build.toolchain.LLVM"}),(0,r.kt)("h2",{id:"llvm-objects"},"LLVM Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class LLVM(Toolchain)\n")),(0,r.kt)("p",null,"The LLVM toolchain: clang and clang++ compilers, etc."),(0,r.kt)("p",null,"This class abstracts away many features of the compiler and provides\nmildly generic compile, link and archive functions."),(0,r.kt)("h2",{id:"attributes"},"Attributes"),(0,r.kt)("p",null,"c_compiler : :any:",(0,r.kt)("inlineCode",{parentName:"p"},"pathlib.Path"),"\nPath to the ",(0,r.kt)("inlineCode",{parentName:"p"},"clang")," executable\ncpp_compiler : :any:",(0,r.kt)("inlineCode",{parentName:"p"},"pathlib.Path"),"\nPath to the ",(0,r.kt)("inlineCode",{parentName:"p"},"clang++")," executable\narchiver : :any:",(0,r.kt)("inlineCode",{parentName:"p"},"pathlib.Path"),"\nPath to the ",(0,r.kt)("inlineCode",{parentName:"p"},"llvm-ar")," executable\nmax_cpp_standard : str\nCompile flag for the latest supported\nC++ standard of the found compiler"),(0,r.kt)("a",{id:"clang_build.toolchain.LLVM.__init__"}),(0,r.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __init__()\n")),(0,r.kt)("p",null,"Search for clang and detect compiler features."),(0,r.kt)("h2",{id:"raises"},"Raises"),(0,r.kt)("p",null,"RuntimeError\nIf a compiler or linker tool wasn't found on the system."),(0,r.kt)("a",{id:"clang_build.toolchain.LLVM.dialect_exists"}),(0,r.kt)("h4",{id:"dialect_exists"},"dialect","_","exists"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@_lru_cache(maxsize=1)\ndef dialect_exists(year)\n")),(0,r.kt)("p",null,"Check if a given dialect flag is valid."),(0,r.kt)("h2",{id:"parameters-4"},"Parameters"),(0,r.kt)("p",null,"year : int\nThe last two digits of the dialect.\nFor example 11 for ",(0,r.kt)("inlineCode",{parentName:"p"},"C++11"),"."),(0,r.kt)("h2",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,"bool\nTrue if the dialect for the given year is supported\nby clang."),(0,r.kt)("a",{id:"clang_build.toolchain.LLVM.generate_dependency_file"}),(0,r.kt)("h4",{id:"generate_dependency_file-1"},"generate","_","dependency","_","file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def generate_dependency_file(source_file, dependency_file, flags, include_directories, is_c_target)\n")),(0,r.kt)("p",null,"Generate a dependency file for a given source file."),(0,r.kt)("p",null,"If the dependency file is placed into a non-existing folder, this\nfolder is generated before compilation."),(0,r.kt)("h2",{id:"parameters-5"},"Parameters"),(0,r.kt)("p",null,"source_file : pathlib.Path\nThe source file to compile"),(0,r.kt)("p",null,"dependency_file : pathlib.Path\nThe dependency file to generate"),(0,r.kt)("p",null,"flags : list of str\nList of flags to pass to the compiler"),(0,r.kt)("h2",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,"bool\nTrue if the dependency file generation was successful, else False\nstr\nOutput of the compiler"),(0,r.kt)("a",{id:"clang_build.toolchain.LLVM.compile"}),(0,r.kt)("h4",{id:"compile-1"},"compile"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def compile(source_file, object_file, include_directories, flags, is_c_target)\n")),(0,r.kt)("p",null,"Compile a given source file into an object file."),(0,r.kt)("p",null,"If the object file is placed into a non-existing folder, this\nfolder is generated before compilation."),(0,r.kt)("h2",{id:"parameters-6"},"Parameters"),(0,r.kt)("p",null,"source_file : pathlib.Path\nThe source file to compile"),(0,r.kt)("p",null,"object_file : pathlib.Path\nThe object file to generate during compilation"),(0,r.kt)("p",null,"flags : list of str\nList of flags to pass to the compiler"),(0,r.kt)("h2",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,"bool\nTrue if the compilation was successful, else False\nstr\nOutput of the compiler"))}p.isMDXComponent=!0}}]);