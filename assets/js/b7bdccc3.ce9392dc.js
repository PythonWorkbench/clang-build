"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7649],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return _}});var l=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,l,r=function(e,t){if(null==e)return{};var n,l,r={},i=Object.keys(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=l.createContext({}),c=function(e){var t=l.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=c(e.components);return l.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},u=l.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=c(n),_=r,h=u["".concat(d,".").concat(_)]||u[_]||p[_]||i;return n?l.createElement(h,a(a({ref:t},s),{},{components:n})):l.createElement(h,a({ref:t},s))}));function _(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,a[1]=o;for(var c=2;c<i;c++)a[c]=n[c];return l.createElement.apply(null,a)}return l.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4320:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return d},metadata:function(){return c},toc:function(){return s},default:function(){return u}});var l=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],o={},d=void 0,c={unversionedId:"module_reference/test",id:"module_reference/test",title:"test",description:"Module for the Circle class.",source:"@site/docs/module_reference/test.md",sourceDirName:"module_reference",slug:"/module_reference/test",permalink:"/clang-build/module_reference/test",editUrl:"https://github.com/Trick-17/clang-build/docs/module_reference/test.md",tags:[],version:"current",frontMatter:{},sidebar:"moduleSidebar",previous:{title:"Target settings",permalink:"/clang-build/module_reference/target"},next:{title:"toolchain",permalink:"/clang-build/module_reference/toolchain"}},s=[{value:"Circle Objects",id:"circle-objects",children:[{value:"__repr__",id:"__repr__",children:[],level:4}],level:2},{value:"Returns",id:"returns",children:[{value:"__str__",id:"__str__",children:[],level:4}],level:2},{value:"Returns",id:"returns-1",children:[],level:2},{value:"Directories Objects",id:"directories-objects",children:[{value:"__init__",id:"__init__",children:[],level:4}],level:2},{value:"CompileError Objects",id:"compileerror-objects",children:[{value:"__init__",id:"__init__-1",children:[],level:4}],level:2},{value:"LinkError Objects",id:"linkerror-objects",children:[{value:"__init__",id:"__init__-2",children:[],level:4}],level:2},{value:"BundleError Objects",id:"bundleerror-objects",children:[{value:"__init__",id:"__init__-3",children:[],level:4}],level:2},{value:"RedistributableError Objects",id:"redistributableerror-objects",children:[{value:"__init__",id:"__init__-4",children:[],level:4},{value:"download_sources",id:"download_sources",children:[],level:4}],level:2},{value:"Project Objects",id:"project-objects",children:[{value:"build_directory",id:"build_directory",children:[],level:4},{value:"config",id:"config",children:[],level:4},{value:"directory",id:"directory",children:[],level:4},{value:"environment",id:"environment",children:[],level:4},{value:"identifier",id:"identifier",children:[],level:4},{value:"name",id:"name",children:[],level:4},{value:"parent",id:"parent",children:[],level:4},{value:"project_tree",id:"project_tree",children:[],level:4},{value:"subprojects",id:"subprojects",children:[],level:4},{value:"target_list",id:"target_list",children:[],level:4},{value:"__init__",id:"__init__-5",children:[],level:4}],level:2},{value:"Parameters",id:"parameters",children:[{value:"from_directory",id:"from_directory",children:[],level:4},{value:"from_config",id:"from_config",children:[],level:4},{value:"add_targets",id:"add_targets",children:[],level:4},{value:"build",id:"build",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-1",children:[{value:"get_sources",id:"get_sources",children:[],level:4}],level:2},{value:"Target Objects",id:"target-objects",children:[{value:"name",id:"name-1",children:[],level:4},{value:"identifier",id:"identifier-1",children:[],level:4},{value:"dependencies",id:"dependencies",children:[],level:4},{value:"public_dependencies",id:"public_dependencies",children:[],level:4},{value:"root_directory",id:"root_directory",children:[],level:4},{value:"build_directory",id:"build_directory-1",children:[],level:4},{value:"headers",id:"headers",children:[],level:4},{value:"directories",id:"directories",children:[],level:4},{value:"__init__",id:"__init__-6",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-2",children:[{value:"compile",id:"compile",children:[],level:4},{value:"link",id:"link",children:[],level:4},{value:"bundle",id:"bundle",children:[],level:4},{value:"redistributable",id:"redistributable",children:[],level:4},{value:"build_flags",id:"build_flags",children:[],level:4}],level:2},{value:"HeaderOnly Objects",id:"headeronly-objects",children:[{value:"__init__",id:"__init__-7",children:[],level:4}],level:2},{value:"Compilable Objects",id:"compilable-objects",children:[{value:"compile",id:"compile-1",children:[],level:4}],level:2},{value:"Executable Objects",id:"executable-objects",children:[{value:"__init__",id:"__init__-8",children:[],level:4}],level:2},{value:"SharedLibrary Objects",id:"sharedlibrary-objects",children:[{value:"__init__",id:"__init__-9",children:[],level:4}],level:2},{value:"StaticLibrary Objects",id:"staticlibrary-objects",children:[{value:"__init__",id:"__init__-10",children:[],level:4},{value:"link",id:"link-1",children:[],level:4}],level:2},{value:"TargetDescription Objects",id:"targetdescription-objects",children:[{value:"__init__",id:"__init__-11",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-3",children:[{value:"identifier",id:"identifier-2",children:[],level:4},{value:"root_directory",id:"root_directory-1",children:[],level:4},{value:"build_directory",id:"build_directory-2",children:[],level:4},{value:"get_sources",id:"get_sources-1",children:[],level:4}],level:2},{value:"Toolchain Objects",id:"toolchain-objects",children:[{value:"generate_dependency_file",id:"generate_dependency_file",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-4",children:[],level:2},{value:"Returns",id:"returns-2",children:[{value:"compile",id:"compile-2",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-5",children:[],level:2},{value:"Returns",id:"returns-3",children:[{value:"link",id:"link-2",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-6",children:[],level:2},{value:"Returns",id:"returns-4",children:[{value:"archive",id:"archive",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-7",children:[],level:2},{value:"Returns",id:"returns-5",children:[],level:2},{value:"LLVM Objects",id:"llvm-objects",children:[],level:2},{value:"Attributes",id:"attributes",children:[{value:"__init__",id:"__init__-12",children:[],level:4}],level:2},{value:"Raises",id:"raises",children:[{value:"dialect_exists",id:"dialect_exists",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-8",children:[],level:2},{value:"Returns",id:"returns-6",children:[{value:"generate_dependency_file",id:"generate_dependency_file-1",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-9",children:[],level:2},{value:"Returns",id:"returns-7",children:[{value:"compile",id:"compile-3",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-10",children:[],level:2},{value:"Returns",id:"returns-8",children:[],level:2},{value:"TreeEntry Objects",id:"treeentry-objects",children:[{value:"__eq__",id:"__eq__",children:[],level:4},{value:"__hash__",id:"__hash__",children:[],level:4}],level:2}],p={toc:s};function u(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,l.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("a",{id:"clang_build"}),(0,i.kt)("h1",{id:"clang_build"},"clang","_","build"),(0,i.kt)("a",{id:"clang_build.build_type"}),(0,i.kt)("h1",{id:"clang_buildbuild_type"},"clang","_","build.build","_","type"),(0,i.kt)("a",{id:"clang_build.circle"}),(0,i.kt)("h1",{id:"clang_buildcircle"},"clang","_","build.circle"),(0,i.kt)("p",null,"Module for the Circle class."),(0,i.kt)("a",{id:"clang_build.circle.Circle"}),(0,i.kt)("h2",{id:"circle-objects"},"Circle Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Circle(list)\n")),(0,i.kt)("p",null,"List with a circular dependency representation."),(0,i.kt)("p",null,"Utility class to print circular dependencies. Given\na list ",'["A", "B", "A"]',", this list will print as:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"A -> B -> A\n")),(0,i.kt)("p",null,"indicating the circular dependency."),(0,i.kt)("a",{id:"clang_build.circle.Circle.__repr__"}),(0,i.kt)("h4",{id:"__repr__"},"_","_","repr","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __repr__() -> str\n")),(0,i.kt)("p",null,"Return a representation of this circle."),(0,i.kt)("h2",{id:"returns"},"Returns"),(0,i.kt)("p",null,"str\nAn arrow connected string of the circular\ndependency"),(0,i.kt)("a",{id:"clang_build.circle.Circle.__str__"}),(0,i.kt)("h4",{id:"__str__"},"_","_","str","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __str__() -> str\n")),(0,i.kt)("p",null,"Return a string representation of this circle."),(0,i.kt)("h2",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,"str\nAn arrow connected string of the circular\ndependency"),(0,i.kt)("a",{id:"clang_build.cli"}),(0,i.kt)("h1",{id:"clang_buildcli"},"clang","_","build.cli"),(0,i.kt)("p",null,"clang-build:\nTODO: module docstring..."),(0,i.kt)("a",{id:"clang_build.conf"}),(0,i.kt)("h1",{id:"clang_buildconf"},"clang","_","build.conf"),(0,i.kt)("a",{id:"clang_build.directories"}),(0,i.kt)("h1",{id:"clang_builddirectories"},"clang","_","build.directories"),(0,i.kt)("a",{id:"clang_build.directories.Directories"}),(0,i.kt)("h2",{id:"directories-objects"},"Directories Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Directories()\n")),(0,i.kt)("a",{id:"clang_build.directories.Directories.__init__"}),(0,i.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(files, dependencies, public_dependencies)\n")),(0,i.kt)("p",null,"The root and build directories are taken from ",(0,i.kt)("inlineCode",{parentName:"p"},"target_description"),",\ninclude directories from ",(0,i.kt)("inlineCode",{parentName:"p"},"files")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"dependencies"),"."),(0,i.kt)("p",null,"Include directories are made unique."),(0,i.kt)("a",{id:"clang_build.environment"}),(0,i.kt)("h1",{id:"clang_buildenvironment"},"clang","_","build.environment"),(0,i.kt)("p",null,"This module contains the ",(0,i.kt)("inlineCode",{parentName:"p"},"Environment")," class."),(0,i.kt)("a",{id:"clang_build.errors"}),(0,i.kt)("h1",{id:"clang_builderrors"},"clang","_","build.errors"),(0,i.kt)("p",null,"Module containing custom errors that are\nraised by clang-build if something goes wrong."),(0,i.kt)("a",{id:"clang_build.errors.CompileError"}),(0,i.kt)("h2",{id:"compileerror-objects"},"CompileError Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class CompileError(RuntimeError)\n")),(0,i.kt)("p",null,"Error that is raised if compilation was\nnot successful."),(0,i.kt)("a",{id:"clang_build.errors.CompileError.__init__"}),(0,i.kt)("h4",{id:"__init__-1"},"_","_","init","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(message, error_dict=None)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"message"),": Message of the error"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"error_dict"),": A dict containing all errors\nthat occurred during compilation")),(0,i.kt)("a",{id:"clang_build.errors.LinkError"}),(0,i.kt)("h2",{id:"linkerror-objects"},"LinkError Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class LinkError(RuntimeError)\n")),(0,i.kt)("p",null,"Error that is raised if linking was\nnot successful."),(0,i.kt)("a",{id:"clang_build.errors.LinkError.__init__"}),(0,i.kt)("h4",{id:"__init__-2"},"_","_","init","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(message, error_dict=None)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"message"),": Message of the error"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"error_dict"),": A dict containing all errors\nthat occurred during compilation")),(0,i.kt)("a",{id:"clang_build.errors.BundleError"}),(0,i.kt)("h2",{id:"bundleerror-objects"},"BundleError Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class BundleError(RuntimeError)\n")),(0,i.kt)("p",null,"Error that is raised if creating a bundle\nwas not successful."),(0,i.kt)("a",{id:"clang_build.errors.BundleError.__init__"}),(0,i.kt)("h4",{id:"__init__-3"},"_","_","init","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(message, error_dict=None)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"message"),": Message of the error"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"error_dict"),": A dict containing all errors\nthat occurred during compilation")),(0,i.kt)("a",{id:"clang_build.errors.RedistributableError"}),(0,i.kt)("h2",{id:"redistributableerror-objects"},"RedistributableError Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class RedistributableError(RuntimeError)\n")),(0,i.kt)("p",null,"Error that is raised if creating a\nredistributable was not successful."),(0,i.kt)("a",{id:"clang_build.errors.RedistributableError.__init__"}),(0,i.kt)("h4",{id:"__init__-4"},"_","_","init","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(message, error_dict=None)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"message"),": Message of the error"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"error_dict"),": A dict containing all errors\nthat occurred during compilation")),(0,i.kt)("a",{id:"clang_build.flags"}),(0,i.kt)("h1",{id:"clang_buildflags"},"clang","_","build.flags"),(0,i.kt)("a",{id:"clang_build.git_tools"}),(0,i.kt)("h1",{id:"clang_buildgit_tools"},"clang","_","build.git","_","tools"),(0,i.kt)("a",{id:"clang_build.git_tools.download_sources"}),(0,i.kt)("h4",{id:"download_sources"},"download","_","sources"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def download_sources(url, directory, logger, version=None, clone_recursively=True)\n")),(0,i.kt)("p",null,"Download sources using git."),(0,i.kt)("a",{id:"clang_build.io_tools"}),(0,i.kt)("h1",{id:"clang_buildio_tools"},"clang","_","build.io","_","tools"),(0,i.kt)("a",{id:"clang_build.logging_tools"}),(0,i.kt)("h1",{id:"clang_buildlogging_tools"},"clang","_","build.logging","_","tools"),(0,i.kt)("a",{id:"clang_build.progress_bar"}),(0,i.kt)("h1",{id:"clang_buildprogress_bar"},"clang","_","build.progress","_","bar"),(0,i.kt)("a",{id:"clang_build.project"}),(0,i.kt)("h1",{id:"clang_buildproject"},"clang","_","build.project"),(0,i.kt)("p",null,"A class that contains potentially multiple targets and other projects."),(0,i.kt)("a",{id:"clang_build.project.Project"}),(0,i.kt)("h2",{id:"project-objects"},"Project Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Project(_NamedLogger,  _TreeEntry)\n")),(0,i.kt)("p",null,"The Project class is all about organising targets and managing folder structures."),(0,i.kt)("p",null,"Every start of clang-build, a Project is created that scans a given folder for what\ncould potentially be a large multi-subproject structure. The project will find and\nconfigure all targets as specified by the parameters given. Once it is created, the\nstructure that was discovered can be explored and targets can be built."),(0,i.kt)("a",{id:"clang_build.project.Project.build_directory"}),(0,i.kt)("h4",{id:"build_directory"},"build","_","directory"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef build_directory()\n")),(0,i.kt)("p",null,"Return the output directory for build objects for this project."),(0,i.kt)("p",null,"Apart from a folder where the project files are stored, a project\nalso has a separate folder where build files (like compiled object\nfiles or executables, etc.) are stored."),(0,i.kt)("a",{id:"clang_build.project.Project.config"}),(0,i.kt)("h4",{id:"config"},"config"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef config()\n")),(0,i.kt)("p",null,"Return the config dict of this project."),(0,i.kt)("p",null,"Non-trivial projects will normally define project details in a toml file.\nThis dict is a :any:",(0,i.kt)("inlineCode",{parentName:"p"},"dict")," version of this file."),(0,i.kt)("a",{id:"clang_build.project.Project.directory"}),(0,i.kt)("h4",{id:"directory"},"directory"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef directory()\n")),(0,i.kt)("p",null,"Return the directory of this project."),(0,i.kt)("p",null,"Every project is located in a directory that has to be specified.\nThe directory is the one that either contains a toml file or for\ntrivial projects just the default folder structure that can be\nsearched by clang-build."),(0,i.kt)("a",{id:"clang_build.project.Project.environment"}),(0,i.kt)("h4",{id:"environment"},"environment"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef environment()\n")),(0,i.kt)("p",null,"Return the set of global settings."),(0,i.kt)("a",{id:"clang_build.project.Project.identifier"}),(0,i.kt)("h4",{id:"identifier"},"identifier"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef identifier() -> str\n")),(0,i.kt)("p",null,"Returns the unique identifier of this project."),(0,i.kt)("p",null,"The unique identifier for a project can be:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'"project" if this is a basic project and no name was given'),(0,i.kt)("li",{parentName:"ul"},"A simple string if a name was given to this project"),(0,i.kt)("li",{parentName:"ul"},'A string with one or more "." if this is a subproject')),(0,i.kt)("a",{id:"clang_build.project.Project.name"}),(0,i.kt)("h4",{id:"name"},"name"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef name() -> str\n")),(0,i.kt)("p",null,"Return the name of this project."),(0,i.kt)("p",null,'Every project can be given a name. A name is a string\nthat does not contain "."s. For basic project no name\nhas to be provided.'),(0,i.kt)("a",{id:"clang_build.project.Project.parent"}),(0,i.kt)("h4",{id:"parent"},"parent"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef parent()\n")),(0,i.kt)("p",null,"Return the parent of this project."),(0,i.kt)("p",null,"Projects are organised in a tree like structure. This project\nwill return the parent project except for the case where this\nproject is the top level project."),(0,i.kt)("a",{id:"clang_build.project.Project.project_tree"}),(0,i.kt)("h4",{id:"project_tree"},"project","_","tree"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef project_tree()\n")),(0,i.kt)("p",null,"Return a :any:",(0,i.kt)("inlineCode",{parentName:"p"},"networkx")," tree representation of all selected targets."),(0,i.kt)("p",null,"Targets can have dependencies on each other. This can be represented\nin a tree structure. Therefore, the targets that were selected during\nthe initialization of the Project are available as a DiGraph. This\ngraph is the global project tree. If you are only interested in subgraphs\nyou have to use the :any:",(0,i.kt)("inlineCode",{parentName:"p"},"networkx")," functionality."),(0,i.kt)("a",{id:"clang_build.project.Project.subprojects"}),(0,i.kt)("h4",{id:"subprojects"},"subprojects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef subprojects()\n")),(0,i.kt)("p",null,"Return a list of subprojects."),(0,i.kt)("p",null,"All direct children of this project (subprojects only, no targets)\nare returned as a list."),(0,i.kt)("a",{id:"clang_build.project.Project.target_list"}),(0,i.kt)("h4",{id:"target_list"},"target","_","list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef target_list()\n")),(0,i.kt)("p",null,"Return all targets that are defined in this project."),(0,i.kt)("p",null,"This list includes only those targets that were defined in this\nproject and not those defined in subprojects."),(0,i.kt)("a",{id:"clang_build.project.Project.__init__"}),(0,i.kt)("h4",{id:"__init__-5"},"_","_","init","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(name, config, directory, environment, **kwargs)\n")),(0,i.kt)("p",null,"Initialise a project."),(0,i.kt)("p",null,"The procedure for initialisation is:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},". Setting some instance attributes\n"),". Initialising sub-projects and filling the dependency tree recursively\n",(0,i.kt)("inlineCode",{parentName:"p"},". Determining the targets to configure\n"),". Configuring the targets"),(0,i.kt)("h2",{id:"parameters"},"Parameters"),(0,i.kt)("p",null,"directory : str or :any:",(0,i.kt)("inlineCode",{parentName:"p"},"pathlib.Path"),"\nThe directory to search for a ",(0,i.kt)("inlineCode",{parentName:"p"},"toml")," file or source files\nenvironment : any:",(0,i.kt)("inlineCode",{parentName:"p"},"clang_build.environment.Environment"),"\nAn any:",(0,i.kt)("inlineCode",{parentName:"p"},"clang_build.environment.Environment")," instance defining some global\nsettings for this run of clang-build.\nkwargs\nUsed for internal purposes only."),(0,i.kt)("a",{id:"clang_build.project.Project.from_directory"}),(0,i.kt)("h4",{id:"from_directory"},"from","_","directory"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@classmethod\ndef from_directory(cls, directory, environment, **kwargs)\n")),(0,i.kt)("p",null,"Generate a project from a directory."),(0,i.kt)("p",null,"This method covers the following cases in order:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},'initialization from a "clang-build.py", if present'),(0,i.kt)("li",{parentName:"ol"},'initialization from a "clang-build.toml", if present'),(0,i.kt)("li",{parentName:"ol"},"defaults without any configuration")),(0,i.kt)("a",{id:"clang_build.project.Project.from_config"}),(0,i.kt)("h4",{id:"from_config"},"from","_","config"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@classmethod\ndef from_config(cls, config: dict, directory, environment, **kwargs)\n")),(0,i.kt)("p",null,"Generate a project from a config dictionary."),(0,i.kt)("p",null,"optional kwarg ",(0,i.kt)("inlineCode",{parentName:"p"},"targets"),": Any of the ",(0,i.kt)("inlineCode",{parentName:"p"},"targets")," may be a ",(0,i.kt)("inlineCode",{parentName:"p"},"Target")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"TargetDescription")),(0,i.kt)("a",{id:"clang_build.project.Project.add_targets"}),(0,i.kt)("h4",{id:"add_targets"},"add","_","targets"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def add_targets(target_list: list)\n")),(0,i.kt)("p",null,"Add a list of targets to this project."),(0,i.kt)("p",null,"This method does the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"check the validity of targets in the given list"),(0,i.kt)("li",{parentName:"ul"},"add to the project's target_list"),(0,i.kt)("li",{parentName:"ul"},"amend the dependency tree:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Add nodes and edges for targets in self"),(0,i.kt)("li",{parentName:"ul"},"Add edges for dependencies in targets defined in project"))),(0,i.kt)("li",{parentName:"ul"},"optionally create a new dotfile"),(0,i.kt)("li",{parentName:"ul"},"check for circular dependencies in the project")),(0,i.kt)("p",null,"This method integrates this project into the global project tree."),(0,i.kt)("p",null,"This helper function is part of the initialisation of a project.\nIt adds this project, all targets and their dependencies to the\nglobal project tree. If there are illegal dependencies, this function\nwill raise an exception."),(0,i.kt)("a",{id:"clang_build.project.Project.build"}),(0,i.kt)("h4",{id:"build"},"build"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def build(build_all: bool = False, target_list: _Optional[list] = None, number_of_threads: _Optional[int] = None)\n")),(0,i.kt)("p",null,"Build targets of this project."),(0,i.kt)("p",null,"By default, this function builds all targets in this project as well\nas all their dependencies. This function will configure all targets\nthat haven't been configured in a previous call."),(0,i.kt)("h2",{id:"parameters-1"},"Parameters"),(0,i.kt)("p",null,"build_all : bool\nIf set to true, will not only build all targets in this project\nand their dependencies, but also all targets of all sub-projects.\ntarget_list : list\nIf given, will build all targets in this project that are in the\ngiven list, as well as all their dependencies.\nnumber_of_threads : int\nIf given will compile targets with the given number of threads. Otherwise\nit will use the default number of CPU cores visible to Python."),(0,i.kt)("a",{id:"clang_build.project.Project.get_sources"}),(0,i.kt)("h4",{id:"get_sources"},"get","_","sources"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def get_sources()\n")),(0,i.kt)("p",null,"External sources, if present, will be downloaded to build_directory/external_sources."),(0,i.kt)("a",{id:"clang_build.single_source"}),(0,i.kt)("h1",{id:"clang_buildsingle_source"},"clang","_","build.single","_","source"),(0,i.kt)("a",{id:"clang_build.target"}),(0,i.kt)("h1",{id:"clang_buildtarget"},"clang","_","build.target"),(0,i.kt)("p",null,"Target describes a single build or dependency target with all needed paths and\na list of buildables that comprise it's compile and link steps."),(0,i.kt)("a",{id:"clang_build.target.Target"}),(0,i.kt)("h2",{id:"target-objects"},"Target Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Target(_TreeEntry,  _NamedLogger)\n")),(0,i.kt)("p",null,"Base class for all kinds of target, whose sources have been gathered."),(0,i.kt)("p",null,"Target instances are used in the ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," method of a project."),(0,i.kt)("a",{id:"clang_build.target.Target.name"}),(0,i.kt)("h4",{id:"name-1"},"name"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef name()\n")),(0,i.kt)("p",null,"Return the name of this target."),(0,i.kt)("a",{id:"clang_build.target.Target.identifier"}),(0,i.kt)("h4",{id:"identifier-1"},"identifier"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef identifier()\n")),(0,i.kt)("p",null,"Return the unique identifier of this target."),(0,i.kt)("p",null,'Targets are identified by their parent projects and their name as\n"',"[project.subproject.target]",'".'),(0,i.kt)("a",{id:"clang_build.target.Target.dependencies"}),(0,i.kt)("h4",{id:"dependencies"},"dependencies"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef dependencies()\n")),(0,i.kt)("p",null,"Return a list of any:",(0,i.kt)("inlineCode",{parentName:"p"},"clang_build.target.Target"),", which this\ntarget depends on."),(0,i.kt)("a",{id:"clang_build.target.Target.public_dependencies"}),(0,i.kt)("h4",{id:"public_dependencies"},"public","_","dependencies"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef public_dependencies()\n")),(0,i.kt)("p",null,"Return a list of any:",(0,i.kt)("inlineCode",{parentName:"p"},"clang_build.target.Target"),", which this\ntarget depends on."),(0,i.kt)("a",{id:"clang_build.target.Target.root_directory"}),(0,i.kt)("h4",{id:"root_directory"},"root","_","directory"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef root_directory()\n")),(0,i.kt)("p",null,'Folders "include", "src", etc. are searched\nrelative to this folder.'),(0,i.kt)("a",{id:"clang_build.target.Target.build_directory"}),(0,i.kt)("h4",{id:"build_directory-1"},"build","_","directory"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef build_directory()\n")),(0,i.kt)("p",null,"Return the directory which serves as the root build folder\nfor this target."),(0,i.kt)("a",{id:"clang_build.target.Target.headers"}),(0,i.kt)("h4",{id:"headers"},"headers"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef headers()\n")),(0,i.kt)("p",null,"Headers found for this project."),(0,i.kt)("a",{id:"clang_build.target.Target.directories"}),(0,i.kt)("h4",{id:"directories"},"directories"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef directories()\n")),(0,i.kt)("p",null,"Return the any:",(0,i.kt)("inlineCode",{parentName:"p"},"clang_build.directories.Directories")," in use\nby this target."),(0,i.kt)("a",{id:"clang_build.target.Target.__init__"}),(0,i.kt)("h4",{id:"__init__-6"},"_","_","init","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(target_description, files, dependencies=None, public_dependencies=None)\n")),(0,i.kt)("p",null,"Initialise a target."),(0,i.kt)("p",null,"The procedure for initialisation is:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},". Setting some instance attributes\n"),". Initialising sub-projects and filling the dependency tree recursively\n",(0,i.kt)("inlineCode",{parentName:"p"},". Determining the targets to configure\n"),". Configuring the targets"),(0,i.kt)("h2",{id:"parameters-2"},"Parameters"),(0,i.kt)("p",null,"target_description : :any:",(0,i.kt)("inlineCode",{parentName:"p"},"clang_build.target.TargetDescription"),"\nAll the information on how to gather sources and build the target.\nenvironment : any:",(0,i.kt)("inlineCode",{parentName:"p"},"clang_build.environment.Environment"),"\nAn any:",(0,i.kt)("inlineCode",{parentName:"p"},"clang_build.environment.Environment")," instance defining some global\nsettings for this run of clang-build.\ndependencies\nOptional. A list of any:",(0,i.kt)("inlineCode",{parentName:"p"},"clang_build.target.Target")," which this target\ndepends on.\npublic_dependencies\nOptional. A list of any:",(0,i.kt)("inlineCode",{parentName:"p"},"clang_build.target.Target")," which this target\ndepends on and which should also be available to dependent targets."),(0,i.kt)("a",{id:"clang_build.target.Target.compile"}),(0,i.kt)("h4",{id:"compile"},"compile"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef compile(process_pool, progress_disabled)\n")),(0,i.kt)("p",null,"Compile the target, if applicable."),(0,i.kt)("p",null,"This produces an OS-dependent output in the build/bin folder."),(0,i.kt)("a",{id:"clang_build.target.Target.link"}),(0,i.kt)("h4",{id:"link"},"link"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef link()\n")),(0,i.kt)("p",null,"Link the target, if applicable."),(0,i.kt)("p",null,"This produces an OS-dependent output in the corresponding build folder:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'"bin" for executables and shared objects'),(0,i.kt)("li",{parentName:"ul"},'"lib" for static libraries')),(0,i.kt)("a",{id:"clang_build.target.Target.bundle"}),(0,i.kt)("h4",{id:"bundle"},"bundle"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def bundle()\n")),(0,i.kt)("p",null,"For executable and shared library targets, bundle shared library\ndependencies into the binary output folder and amend the rpath if\nnecessary."),(0,i.kt)("p",null,"They can therefore be used without amending the system PATH or similar."),(0,i.kt)("a",{id:"clang_build.target.Target.redistributable"}),(0,i.kt)("h4",{id:"redistributable"},"redistributable"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def redistributable()\n")),(0,i.kt)("p",null,"Create a redistributable bundle, suitable for installation."),(0,i.kt)("p",null,"The redistributable bundle contains"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'an "include" folder with the public headers (preserving folder structure).\nNote that this includes the headers of public dependencies.'),(0,i.kt)("li",{parentName:"ul"},'"bin" and "lib" folders containing compiled output of the target\nand its dependencies.')),(0,i.kt)("a",{id:"clang_build.target.Target.build_flags"}),(0,i.kt)("h4",{id:"build_flags"},"build","_","flags"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef build_flags()\n")),(0,i.kt)("p",null,"Return the any:",(0,i.kt)("inlineCode",{parentName:"p"},"clang_build.flags.BuildFlags")," of this target."),(0,i.kt)("a",{id:"clang_build.target.HeaderOnly"}),(0,i.kt)("h2",{id:"headeronly-objects"},"HeaderOnly Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class HeaderOnly(Target)\n")),(0,i.kt)("p",null,"HeaderOnly targets are the default target type when no source files are found."),(0,i.kt)("p",null,"Header-only targets cannot have private compile flags, link flags or dependencies.\nThey are automatically promoted to public instead."),(0,i.kt)("p",null,'TODO: need to check whether "public" makes sense for header-only, when we have implemented "private" dependencies'),(0,i.kt)("a",{id:"clang_build.target.HeaderOnly.__init__"}),(0,i.kt)("h4",{id:"__init__-7"},"_","_","init","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(target_description, files, dependencies=None, public_dependencies=None)\n")),(0,i.kt)("p",null,"Initialise a header-only target."),(0,i.kt)("p",null,"Header-only targets' private flags and include-directories are public."),(0,i.kt)("a",{id:"clang_build.target.Compilable"}),(0,i.kt)("h2",{id:"compilable-objects"},"Compilable Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Compilable(Target)\n")),(0,i.kt)("p",null,"A compilable target will generate object files."),(0,i.kt)("a",{id:"clang_build.target.Compilable.compile"}),(0,i.kt)("h4",{id:"compile-1"},"compile"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def compile(process_pool, progress_disabled)\n")),(0,i.kt)("p",null,"From the list of source files, compile those which changed or whose dependencies (included headers, ...) changed."),(0,i.kt)("a",{id:"clang_build.target.Executable"}),(0,i.kt)("h2",{id:"executable-objects"},"Executable Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Executable(Compilable)\n")),(0,i.kt)("p",null,"Executable targets are the default target type when source files are found."),(0,i.kt)("p",null,"An executable cannot be the dependency of another target."),(0,i.kt)("a",{id:"clang_build.target.Executable.__init__"}),(0,i.kt)("h4",{id:"__init__-8"},"_","_","init","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(target_description, files, dependencies=None, public_dependencies=None)\n")),(0,i.kt)("p",null,"Initialise an executable target."),(0,i.kt)("a",{id:"clang_build.target.SharedLibrary"}),(0,i.kt)("h2",{id:"sharedlibrary-objects"},"SharedLibrary Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class SharedLibrary(Compilable)\n")),(0,i.kt)("a",{id:"clang_build.target.SharedLibrary.__init__"}),(0,i.kt)("h4",{id:"__init__-9"},"_","_","init","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(target_description, files, dependencies=None, public_dependencies=None)\n")),(0,i.kt)("p",null,"Initialise a shared library target."),(0,i.kt)("a",{id:"clang_build.target.StaticLibrary"}),(0,i.kt)("h2",{id:"staticlibrary-objects"},"StaticLibrary Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class StaticLibrary(Compilable)\n")),(0,i.kt)("a",{id:"clang_build.target.StaticLibrary.__init__"}),(0,i.kt)("h4",{id:"__init__-10"},"_","_","init","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(target_description, files, dependencies=None, public_dependencies=None)\n")),(0,i.kt)("p",null,"Initialise a static library target."),(0,i.kt)("a",{id:"clang_build.target.StaticLibrary.link"}),(0,i.kt)("h4",{id:"link-1"},"link"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def link()\n")),(0,i.kt)("p",null,'Although not really a "link" procedure, but really only an archiving procedure\nfor simplicity\'s sake, this is also called link'),(0,i.kt)("a",{id:"clang_build.target.TargetDescription"}),(0,i.kt)("h2",{id:"targetdescription-objects"},"TargetDescription Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class TargetDescription(_TreeEntry,  _NamedLogger)\n")),(0,i.kt)("p",null,"A hollow Target used for dependency checking."),(0,i.kt)("p",null,"Before Projects actually configure targets, they first\nmake sure that all dependencies etc are correctly defined.\nFor this initial step, these TargetDescriptions are used.\nThis is also necessary, because some of the target properties\nlike the build folder, depend on the entire project structure\nand thus the two step procedure is necessary."),(0,i.kt)("p",null,"TODO: Change Attributes to properties :)"),(0,i.kt)("a",{id:"clang_build.target.TargetDescription.__init__"}),(0,i.kt)("h4",{id:"__init__-11"},"_","_","init","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(name: str, config: dict, parent_project)\n")),(0,i.kt)("p",null,"Generate a TargetDescription."),(0,i.kt)("h2",{id:"parameters-3"},"Parameters"),(0,i.kt)("p",null,"name: str\nThe name of this target as it will also later be named\nconfig : dict\nThe config for this target (e.g. read from a toml)\nidentifier : str\nUnique str representation of this target\nparent_project : clang_build.project.Project\nThe project to which this target belongs"),(0,i.kt)("a",{id:"clang_build.target.TargetDescription.identifier"}),(0,i.kt)("h4",{id:"identifier-2"},"identifier"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef identifier()\n")),(0,i.kt)("p",null,"Return the unique identifier of this target."),(0,i.kt)("p",null,'Targets are identified by their parent projects and their name as\n"',"[project_name.sub_project_name.target_name]",'".'),(0,i.kt)("p",null,'The default target name is "target".'),(0,i.kt)("a",{id:"clang_build.target.TargetDescription.root_directory"}),(0,i.kt)("h4",{id:"root_directory-1"},"root","_","directory"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef root_directory()\n")),(0,i.kt)("p",null,"Return the root source directory."),(0,i.kt)("p",null,'By default, the "include" and "src" directories are searched relative to\nthis folder.'),(0,i.kt)("p",null,'The folder can be set by adding a "directory" in the config.\nIf this target has external sources, it is relative to the "external_sources"\ndirectory, else it is relative to the parent project\'s directory.'),(0,i.kt)("a",{id:"clang_build.target.TargetDescription.build_directory"}),(0,i.kt)("h4",{id:"build_directory-2"},"build","_","directory"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef build_directory()\n")),(0,i.kt)("p",null,"Return the directory that serves as root build folder for the target."),(0,i.kt)("a",{id:"clang_build.target.TargetDescription.get_sources"}),(0,i.kt)("h4",{id:"get_sources-1"},"get","_","sources"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def get_sources()\n")),(0,i.kt)("p",null,'Download external sources, if present, to "build_directory/external_sources".'),(0,i.kt)("a",{id:"clang_build.toolchain"}),(0,i.kt)("h1",{id:"clang_buildtoolchain"},"clang","_","build.toolchain"),(0,i.kt)("p",null,"Module containing tool chaines used for compiling and linking."),(0,i.kt)("a",{id:"clang_build.toolchain.Toolchain"}),(0,i.kt)("h2",{id:"toolchain-objects"},"Toolchain Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Toolchain()\n")),(0,i.kt)("a",{id:"clang_build.toolchain.Toolchain.generate_dependency_file"}),(0,i.kt)("h4",{id:"generate_dependency_file"},"generate","_","dependency","_","file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef generate_dependency_file(source_file, dependency_file, flags, include_directories, is_c_target)\n")),(0,i.kt)("p",null,"Generate a dependency file for a given source file."),(0,i.kt)("p",null,"If the dependency file is placed into a non-existing folder, this\nfolder is generated before compilation."),(0,i.kt)("h2",{id:"parameters-4"},"Parameters"),(0,i.kt)("p",null,"source_file : pathlib.Path\nThe source file to compile"),(0,i.kt)("p",null,"dependency_file : pathlib.Path\nThe dependency file to generate"),(0,i.kt)("p",null,"flags : list of str\nList of flags to pass to the compiler"),(0,i.kt)("h2",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,"bool\nTrue if the dependency file generation was successful, else False\nstr\nOutput of the compiler"),(0,i.kt)("a",{id:"clang_build.toolchain.Toolchain.compile"}),(0,i.kt)("h4",{id:"compile-2"},"compile"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef compile(source_file, object_file, include_directories, flags, is_c_target)\n")),(0,i.kt)("p",null,"Compile a given source file into an object file."),(0,i.kt)("p",null,"If the object file is placed into a non-existing folder, this\nfolder is generated before compilation."),(0,i.kt)("h2",{id:"parameters-5"},"Parameters"),(0,i.kt)("p",null,"source_file : pathlib.Path\nThe source file to compile"),(0,i.kt)("p",null,"object_file : pathlib.Path\nThe object file to generate during compilation"),(0,i.kt)("p",null,"flags : list of str\nList of flags to pass to the compiler"),(0,i.kt)("h2",{id:"returns-3"},"Returns"),(0,i.kt)("p",null,"bool\nTrue if the compilation was successful, else False\nstr\nOutput of the compiler"),(0,i.kt)("a",{id:"clang_build.toolchain.Toolchain.link"}),(0,i.kt)("h4",{id:"link-2"},"link"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef link(object_files, output_file, flags, library_directories, libraries, is_library, is_c_target)\n")),(0,i.kt)("p",null,"Link into the given output_file."),(0,i.kt)("p",null,"The command should contain all object files, library search paths\nand libraries against which to link. If the output_file is placed\nin a non-existing folder, the folder and all required parents\nare generated."),(0,i.kt)("h2",{id:"parameters-6"},"Parameters"),(0,i.kt)("p",null,"object_files : list of pathlib.Path\nObject files to link\noutput_file : pathlib.Path\nThe output file to generate\nflags : list of str\nFlags to pass to the linker\nlibrary_directories : list of pathlib.Path\nDirectories to search for libraries during linking\nlibraries : list of pathlib.Path\nLibraries to link to\nis_library : bool\nIf true, create a shared library. Else, create an executable."),(0,i.kt)("h2",{id:"returns-4"},"Returns"),(0,i.kt)("p",null,"bool\nTrue if linking was successful, False otherwise\nstr\nThe output of the linker"),(0,i.kt)("a",{id:"clang_build.toolchain.Toolchain.archive"}),(0,i.kt)("h4",{id:"archive"},"archive"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef archive(object_files, output_file, flags)\n")),(0,i.kt)("p",null,"Archive object files into a static library."),(0,i.kt)("h2",{id:"parameters-7"},"Parameters"),(0,i.kt)("p",null,"object_files : list of pathlib.Path\nObject files to put in a static library\noutput_file : pathlib.Path\nThe static library to create\nflags : list of str\nFlags to pass to the archiver"),(0,i.kt)("h2",{id:"returns-5"},"Returns"),(0,i.kt)("p",null,"bool\nTrue if archiving was successful, False otherwise\nstr\nThe output of the archiver"),(0,i.kt)("a",{id:"clang_build.toolchain.LLVM"}),(0,i.kt)("h2",{id:"llvm-objects"},"LLVM Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class LLVM(Toolchain)\n")),(0,i.kt)("p",null,"The LLVM toolchain: clang and clang++ compilers, etc."),(0,i.kt)("p",null,"This class abstracts away many features of the compiler and provides\nmildly generic compile, link and archive functions."),(0,i.kt)("h2",{id:"attributes"},"Attributes"),(0,i.kt)("p",null,"c_compiler : :any:",(0,i.kt)("inlineCode",{parentName:"p"},"pathlib.Path"),"\nPath to the ",(0,i.kt)("inlineCode",{parentName:"p"},"clang")," executable\ncpp_compiler : :any:",(0,i.kt)("inlineCode",{parentName:"p"},"pathlib.Path"),"\nPath to the ",(0,i.kt)("inlineCode",{parentName:"p"},"clang++")," executable\narchiver : :any:",(0,i.kt)("inlineCode",{parentName:"p"},"pathlib.Path"),"\nPath to the ",(0,i.kt)("inlineCode",{parentName:"p"},"llvm-ar")," executable\nmax_cpp_standard : str\nCompile flag for the latest supported\nC++ standard of the found compiler"),(0,i.kt)("a",{id:"clang_build.toolchain.LLVM.__init__"}),(0,i.kt)("h4",{id:"__init__-12"},"_","_","init","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __init__()\n")),(0,i.kt)("p",null,"Search for clang and detect compiler features."),(0,i.kt)("h2",{id:"raises"},"Raises"),(0,i.kt)("p",null,"RuntimeError\nIf a compiler or linker tool wasn't found on the system."),(0,i.kt)("a",{id:"clang_build.toolchain.LLVM.dialect_exists"}),(0,i.kt)("h4",{id:"dialect_exists"},"dialect","_","exists"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@_lru_cache(maxsize=1)\ndef dialect_exists(year)\n")),(0,i.kt)("p",null,"Check if a given dialect flag is valid."),(0,i.kt)("h2",{id:"parameters-8"},"Parameters"),(0,i.kt)("p",null,"year : int\nThe last two digits of the dialect.\nFor example 11 for ",(0,i.kt)("inlineCode",{parentName:"p"},"C++11"),"."),(0,i.kt)("h2",{id:"returns-6"},"Returns"),(0,i.kt)("p",null,"bool\nTrue if the dialect for the given year is supported\nby clang."),(0,i.kt)("a",{id:"clang_build.toolchain.LLVM.generate_dependency_file"}),(0,i.kt)("h4",{id:"generate_dependency_file-1"},"generate","_","dependency","_","file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def generate_dependency_file(source_file, dependency_file, flags, include_directories, is_c_target)\n")),(0,i.kt)("p",null,"Generate a dependency file for a given source file."),(0,i.kt)("p",null,"If the dependency file is placed into a non-existing folder, this\nfolder is generated before compilation."),(0,i.kt)("h2",{id:"parameters-9"},"Parameters"),(0,i.kt)("p",null,"source_file : pathlib.Path\nThe source file to compile"),(0,i.kt)("p",null,"dependency_file : pathlib.Path\nThe dependency file to generate"),(0,i.kt)("p",null,"flags : list of str\nList of flags to pass to the compiler"),(0,i.kt)("h2",{id:"returns-7"},"Returns"),(0,i.kt)("p",null,"bool\nTrue if the dependency file generation was successful, else False\nstr\nOutput of the compiler"),(0,i.kt)("a",{id:"clang_build.toolchain.LLVM.compile"}),(0,i.kt)("h4",{id:"compile-3"},"compile"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def compile(source_file, object_file, include_directories, flags, is_c_target)\n")),(0,i.kt)("p",null,"Compile a given source file into an object file."),(0,i.kt)("p",null,"If the object file is placed into a non-existing folder, this\nfolder is generated before compilation."),(0,i.kt)("h2",{id:"parameters-10"},"Parameters"),(0,i.kt)("p",null,"source_file : pathlib.Path\nThe source file to compile"),(0,i.kt)("p",null,"object_file : pathlib.Path\nThe object file to generate during compilation"),(0,i.kt)("p",null,"flags : list of str\nList of flags to pass to the compiler"),(0,i.kt)("h2",{id:"returns-8"},"Returns"),(0,i.kt)("p",null,"bool\nTrue if the compilation was successful, else False\nstr\nOutput of the compiler"),(0,i.kt)("a",{id:"clang_build.tree_entry"}),(0,i.kt)("h1",{id:"clang_buildtree_entry"},"clang","_","build.tree","_","entry"),(0,i.kt)("p",null,"Module for the TreeEntry class."),(0,i.kt)("a",{id:"clang_build.tree_entry.TreeEntry"}),(0,i.kt)("h2",{id:"treeentry-objects"},"TreeEntry Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class TreeEntry()\n")),(0,i.kt)("p",null,"Abstract class to make an object insertable into a tree."),(0,i.kt)("p",null,"Implements means to identify and compare an object\nbased on a member variable called ",(0,i.kt)("inlineCode",{parentName:"p"},"identifier"),"\nwhich every subclass has to define."),(0,i.kt)("a",{id:"clang_build.tree_entry.TreeEntry.__eq__"}),(0,i.kt)("h4",{id:"__eq__"},"_","_","eq","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __eq__(other) -> bool\n")),(0,i.kt)("p",null,"Declare two objects identical if ",(0,i.kt)("inlineCode",{parentName:"p"},"identifier")," is the same."),(0,i.kt)("a",{id:"clang_build.tree_entry.TreeEntry.__hash__"}),(0,i.kt)("h4",{id:"__hash__"},"_","_","hash","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __hash__() -> int\n")),(0,i.kt)("p",null,"Return a hash value."),(0,i.kt)("p",null,"Hashes the ",(0,i.kt)("inlineCode",{parentName:"p"},"identifier")," value of this\nobject making every object with the same\n",(0,i.kt)("inlineCode",{parentName:"p"},"identifier")," equal to this one (in terms\nof hash value)."))}u.isMDXComponent=!0}}]);