"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6079],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,h=m["".concat(u,".").concat(d)]||m[d]||s[d]||l;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9979:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),i=["components"],o={},u="Toolchains",c={unversionedId:"user_guide/toolchains",id:"user_guide/toolchains",title:"Toolchains",description:"By default, clang-build provides an llvm-clang toolchain (see the LLVM class in",source:"@site/docs/user_guide/toolchains.md",sourceDirName:"user_guide",slug:"/user_guide/toolchains",permalink:"/clang-build/user_guide/toolchains",editUrl:"https://github.com/Trick-17/clang-build/docs/user_guide/toolchains.md",tags:[],version:"current",frontMatter:{},sidebar:"guideSidebar",previous:{title:"Adding projects with custom behaviour",permalink:"/clang-build/user_guide/scripting"}},p=[],s={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"toolchains"},"Toolchains"),(0,l.kt)("p",null,"By default, clang-build provides an llvm-clang toolchain (see the ",(0,l.kt)("inlineCode",{parentName:"p"},"LLVM")," class in\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/Trick-17/clang-build/tree/master/clang_build/toolchain.py"},"clang_build/toolchain.py"),").\nBut it also allows you to use custom ones, by passing passing the ",(0,l.kt)("inlineCode",{parentName:"p"},"toolchain"),"\ncommand line argument, i.e. ",(0,l.kt)("inlineCode",{parentName:"p"},"clang-build ... --toolchain /path/to/your_toolchain.py"),".\nThe Python-file which you pass to clang-build must define a function with the\nfollowing signature:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import clang_build\n\ndef get_toolchain(environment) -> clang_build.toolchain.Toolchain:\n   toolchain = clang_build.toolchain.Toolchain()\n   #...\n   return toolchain\n")),(0,l.kt)("p",null,"For a working example look at\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/Trick-17/clang-build/tree/master/tests/toolchains/emscripten-toolchain.py"},"tests/toolchains/emscripten-toolchain.py"),"."),(0,l.kt)("p",null,"The important part is the signature. You should derive from the ",(0,l.kt)("inlineCode",{parentName:"p"},"Toolchain"),"\nbase class and override the given defaults as needed:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the build platform (on which clang-build is being run), e.g.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"windows"),(0,l.kt)("li",{parentName:"ul"},"osx"),(0,l.kt)("li",{parentName:"ul"},"linux"))),(0,l.kt)("li",{parentName:"ul"},"the host platform (on which the build results may be run), e.g.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"windows"),(0,l.kt)("li",{parentName:"ul"},"osx"),(0,l.kt)("li",{parentName:"ul"},"linux"),(0,l.kt)("li",{parentName:"ul"},"web / browser"))),(0,l.kt)("li",{parentName:"ul"},"the host architecture (on which to run the built binaries), e.g.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"x86"),(0,l.kt)("li",{parentName:"ul"},"GPU"),(0,l.kt)("li",{parentName:"ul"},"web / wasm"))),(0,l.kt)("li",{parentName:"ul"},"a list of supported C-dialect languages, e.g.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"C"),(0,l.kt)("li",{parentName:"ul"},"C++"),(0,l.kt)("li",{parentName:"ul"},"CUDA-C"),(0,l.kt)("li",{parentName:"ul"},"CUDA-C++"),(0,l.kt)("li",{parentName:"ul"},"OpenCL"),(0,l.kt)("li",{parentName:"ul"},"Objective-C"),(0,l.kt)("li",{parentName:"ul"},"Objective-C++"))),(0,l.kt)("li",{parentName:"ul"},"default compile and link flags for all target types (executable, ...) for\nall build types (debug, ...) for the available languages for the given\ncombination of build and host platform")))}m.isMDXComponent=!0}}]);