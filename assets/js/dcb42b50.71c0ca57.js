"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1742],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||l;return n?r.createElement(f,i(i({ref:t},s),{},{components:n})):r.createElement(f,i({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2026:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return s},default:function(){return d}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),i=["components"],o={},u="Multiple targets",c={unversionedId:"user_guide/multiple_targets",id:"version-0.0.0/user_guide/multiple_targets",title:"Multiple targets",description:"For a lot of projects you will have more than one target. Maybe a main application, some libraries and",source:"@site/versioned_docs/version-0.0.0/user_guide/multiple_targets.md",sourceDirName:"user_guide",slug:"/user_guide/multiple_targets",permalink:"/clang-build/0.0.0/user_guide/multiple_targets",editUrl:"https://github.com/Trick-17/clang-build/versioned_docs/version-0.0.0/user_guide/multiple_targets.md",tags:[],version:"0.0.0",frontMatter:{}},s=[{value:"Multiple self-developed targets",id:"multiple-self-developed-targets",children:[],level:2},{value:"External GitHub target",id:"external-github-target",children:[],level:2}],p={toc:s};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"multiple-targets"},"Multiple targets"),(0,l.kt)("p",null,"For a lot of projects you will have more than one target. Maybe a main application, some libraries and\nsome test executables. Let's have a look at different scenarios of multiple targets in a single project."),(0,l.kt)("h2",{id:"multiple-self-developed-targets"},"Multiple self-developed targets"),(0,l.kt)("p",null,"In this first example we have a library and an executable both in the same project. We want to link the\nlibrary and the exectuable. This is our folder structure."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"my_project\n\u251c\u2500\u2500 shared_headers\n|   \u2514\u2500\u2500 header1.hpp\n\u251c\u2500\u2500 my_executable\n|   \u251c\u2500\u2500 include\n|   |   \u251c\u2500\u2500 header1.hpp\n|   |   \u2514\u2500\u2500 header2.hpp\n|   \u2514\u2500\u2500 src\n|       \u251c\u2500\u2500 src1.cpp\n|       \u2514\u2500\u2500 src2.hpp\n\u251c\u2500\u2500 my_lib\n|   \u251c\u2500\u2500 include\n|   |   \u2514\u2500\u2500 header3.hpp\n|   \u2514\u2500\u2500 src\n|       \u2514\u2500\u2500 src3.hpp\n\u2514\u2500\u2500 clang-build.toml\n")),(0,l.kt)("p",null,"The following ",(0,l.kt)("inlineCode",{parentName:"p"},"toml")," file will create and link the targets:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-toml"},'[additional_includes]\n    directory = "shared_headers"\n    target_type = "header only"\n\n[my_library]\n    directory = "my_lib"\n    target_type = "shared library"\n    dependencies = ["shared_headers"]\n\n[app]\n    directory    = "my_executable"\n    dependencies = ["my_lib", "shared_headers"]\n')),(0,l.kt)("p",null,'As you can see we defined the shared headers as another target. Because there is no "additional_includes"\nin clang-build currently, this has the advantage, that we do not have to list the default folders as include\nfolders, too.'),(0,l.kt)("p",null,"Note, the public header files of dependencies are automatically available for include, no extra configuration required!"),(0,l.kt)("h2",{id:"external-github-target"},"External GitHub target"),(0,l.kt)("p",null,"Maybe you have a dependency on an external library on GitHub like Eigen. In this case we can use clang-build's\nfeature to automatically download the library for you. If this is your folder structure:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"my_project\n\u251c\u2500\u2500 include\n|   \u251c\u2500\u2500 cool_features.hpp\n|   \u2514\u2500\u2500 math_lib.hpp\n\u251c\u2500\u2500 src\n|   \u251c\u2500\u2500 cool_features.cpp\n|   \u2514\u2500\u2500 my_app.cpp\n\u2514\u2500\u2500 clang-build.toml\n")),(0,l.kt)("p",null,"and this is your toml file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-toml"},'[myexe]\n    dependencies = ["Eigen"]\n\n[Eigen]\n    target_type = "header only"\n    url         = "https://gitlab.com/libeigen/eigen.git"\n[Eigen.flags]\n    compile  = ["-Wno-deprecated-declarations"]\n    compileRelease = ["-DEIGEN_NO_DEBUG"]\n')),(0,l.kt)("p",null,"Then you already have your project support Eigen. As soon as you run ",(0,l.kt)("inlineCode",{parentName:"p"},"clang-build"),", it will download (or\nuse the cached version if you rebuild) Eigen and make it available for including its headers."))}d.isMDXComponent=!0}}]);